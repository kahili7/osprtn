#ifndef GENERIC_SYS_STATES_H
#define GENERIC_SYS_STATES_H

// состояния потока
enum _THREAD_STATE {
    STATE_DEAD,			// поток завершился и ждет объединения с другим потоком
    STATE_RUNNING,		// поток выполняется процессором. Ядро использует массив (с одной записи для каждого процессора в системе) для отслеживания запущенных потоков
    STATE_READY,		// поток ожидает выполнения, пока процессор выполняет другой поток, равным или более высоким приоритетом
    STATE_STOPPED,		// поток блокируется, ожидая сигнала SIGCONT

    STATE_SEND,                 // поток блокируется на сообщение Отправить (например, он назвал MsgSend(), но сервер еще не получил сообщение)
    STATE_RECEIVE,		// поток блокируется на сообщение Получить (например, он назвал MsgReceive())
    STATE_REPLY,		// поток блокируется на сообщение Ответить (т. е., это называется MsgSend(), и сервер получил сообщение)

    STATE_STACK,		// поток ожидает виртуального адресного пространства, которое будет выделено для стека потока (родитель назвали ThreadCreate())
    STATE_WAITTHREAD,           // ожидающий поток ребенка поток, чтобы завершить создание само по себе (т. е., это называется ThreadCreate())
    STATE_WAITPAGE,		// поток ожидает физической памяти для виртуальных адресов

    STATE_SIGSUSPEND,           // поток блокируется, ожидая сигнала (т. е., это называется sigsuspend())
    STATE_SIGWAITINFO,          // поток блокируется, ожидая сигнала (т. е., это называется sigwaitinfo())
    STATE_NANOSLEEP,            // поток спит в течение короткого интервала времени (например, он назвал nanosleep())
    
    STATE_MUTEX,		// поток блокируется на блокировки взаимного исключения (например, он назвал pthread_mutex_lock())
    STATE_CONDVAR,		// поток блокируется на условной переменной (например, это называется pthread_cond_wait())
    STATE_JOIN,			// поток блокируется, ожидая, чтобы присоединиться к другой поток (например, его называют функцию pthread_join())
    STATE_INTR,			// поток блокируется, ожидая прерывания (т. е., это называется InterruptWait())
    STATE_SEM,			// поток ждет семафор быть опубликовано (т. е., это называется SyncSemWait())
    STATE_WAITCTX,		// нить ждет нецелые (например, с плавающей точкой) контекст, чтобы стать доступным для использования

    STATE_NET_SEND,		// ожидающий поток импульса или сигнала должен быть доставлен по всей сети (т. е., это называется MsgSendPulse(), MsgDeliverEvent(), или SignalKill())
    STATE_NET_REPLY,            // поток ожидает ответа должен быть доставлен по всей сети (т. е., это называется MsgReply*())

    STATE_MAX = 24	/* This cannot be changed. It is the highest we can support */
};
#endif /* GENERIC_SYS_STATES_H */